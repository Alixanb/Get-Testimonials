generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// APP MODELS

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  plan          Plan      @default(FREE)

  accounts Account[]
  sessions Session[]
  products Product[]

  createdAt DateTime @default(now())

  @@map("users")
}

enum Plan {
  FREE
  PREMIUM
}

model Product {
  id              String  @id @default(cuid())
  name            String
  slug String @unique
  note            String?
  information     String?
  review          String?
  thanks          String?
  backgroundColor String?
  enabled Boolean @default(true)


  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  reviews Review[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id     String  @id @default(cuid())
  rating Int
  text   String?
  ipAdress String

  audioUrl String?
  socialLink String?
  socialType SocialType?

  //Image and name getting from social
  name String?
  image String?

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SocialType {
  LINKEDIN
  TWITTER
}